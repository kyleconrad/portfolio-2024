// NTH-CHILD MIXINS
// based on https://css-tricks.com/extremely-handy-nth-child-recipes-sass-mixins/ & https://gist.github.com/adamgiese/717969cb38d4b30e1eff3d3abc6472f0
@mixin valid-quantity($quantity) {
	@if type-of($quantity) != 'number' {
		@error 'The "quantity" parameter must be a number!';
	}
	@if not(unitless($quantity)) {
		@error 'The "quantity" parameter must not have a unit!';
	}
	@if $quantity < 0 {
		@error 'The "quantity" parameter must be at least 0!';
	}
}

@mixin has-nth($expression, $element: '*') {
	&:nth-last-child(#{$expression}):first-child,
	&:nth-last-child(#{$expression}):first-child ~ #{$element} {
		@content;
	}
}

@mixin at-least($quantity, $element: '*') {
	@include valid-quantity($quantity);
	@include has-nth('n + #{$quantity}', $element) {
		@content;
	}
}

@mixin at-most($quantity, $element: '*') {
	@include valid-quantity($quantity);
	@include has-nth('-n + #{$quantity}', $element) {
		@content;
	}
}

@mixin has-exactly($quantity, $element: '*') {
	@include valid-quantity($quantity);
	@include has-nth('#{$quantity}', $element) {
		@content;
	}
}

@mixin divisible-by($quantity, $offset: 0, $element: '*') {
	@include valid-quantity($quantity);
	@include has-nth('#{$quantity}n + #{$offset}', $element) {
		@content;
	}
}

/*
EXAMPLE USAGE:
@include has-nth('n + 4', 'li') {
	border: 0;
}
*/